üìò Project Documentation ‚Äì Clinical Notes De-Identification & Entity Extraction App
1. Project Overview
The goal of this project was to build an end-to-end pipeline for de-identifying sensitive information (PHI/PII) in clinical notes and extracting medically relevant entities. The system was wrapped into a Streamlit web application that allows users to upload clinical notes, instantly view the masked version, and download structured outputs.
________________________________________
2. Motivation
‚Ä¢	Protecting patient privacy is mandatory under HIPAA and Indian health regulations.
‚Ä¢	Unstructured clinical notes contain sensitive identifiers (names, addresses, phone numbers, IDs).
‚Ä¢	For research & analytics, we need to retain medical information (diseases, symptoms, medications) but remove PHI.
‚Ä¢	This project shows how NLP + regex + rule-based masking can solve this problem.
________________________________________
3. Methodology
Step 1 ‚Äì Input Handling
‚Ä¢	User uploads a .txt file containing clinical notes.
‚Ä¢	The app reads raw text.
Step 2 ‚Äì De-Identification Pipeline
Implemented in deid_pipeline_fixed.py:
‚Ä¢	Regex masking for:
o	Dates (dd-mm-yyyy, mm/dd/yyyy, month names etc.)
o	Phone numbers
o	Emails
o	Patient IDs
o	Addresses & known Indian cities
‚Ä¢	spaCy NER masking for:
o	PERSON ‚Üí [NAME]
o	ORG (if hospital/clinic/insurance) ‚Üí [ORG]
o	GPE/LOC/FAC ‚Üí [ADDRESS]
o	DATE ‚Üí [DATE]
‚Ä¢	Whitelist protection: prevents common medical terms (e.g., fever, cough, diabetes) from being wrongly masked.
Step 3 ‚Äì Entity Extraction
Implemented in entity_extract_pipeline.py:
‚Ä¢	Extract entities relevant to clinical text:
o	DISEASE, SYMPTOM, MEDICATION, LAB_TEST, PROCEDURE
‚Ä¢	Outputs structured table with:
Entity | Type | Start | End (character positions)
Step 4 ‚Äì Streamlit App
Implemented in Clinical_text_mask_entity_app.py:
‚Ä¢	Upload .txt clinical notes.
‚Ä¢	Toggle between original and masked view.
‚Ä¢	Entities are highlighted with color codes in masked view.
‚Ä¢	Download options:
o	Masked text (.txt)
o	Extracted entities (.csv)
‚Ä¢	Metrics:
o	Count of entities by type
o	Table with Entity | Type | Count
o	Bar chart (Entity Type frequency)
________________________________________
4. Key Features
‚Ä¢	Privacy-preserving: masks sensitive PHI/PII.
‚Ä¢	Preserves medical context: retains diseases, symptoms, drugs.
‚Ä¢	Interactive UI: easy toggling & highlighting.
‚Ä¢	Downloadable outputs: useful for downstream ML pipelines.
‚Ä¢	Extensible: whitelist & regex patterns can be expanded.
________________________________________
5. Challenges Faced
1.	Over-masking issue: Words like fever were masked as [ADDRESS].
o	‚úÖ Solved using a medical-term whitelist.
2.	Regex false positives: Some IDs/emails overlapped with normal text.
o	‚úÖ Balanced regex strictness vs flexibility.
3.	NER inconsistencies: spaCy sometimes missed rare medical entities.
o	‚úÖ Added custom dictionary rules for medications/tests.
4.	Entity overlap: e.g., ‚ÄúCT scan‚Äù classified as both procedure and lab test.
o	‚úÖ Kept both categories for completeness.
________________________________________
6. Applications
‚Ä¢	Hospitals/Clinics: safe sharing of de-identified patient notes.
‚Ä¢	Medical Research: enable NLP studies without violating privacy.
‚Ä¢	Healthcare Startups: build data lakes from structured entity outputs.
‚Ä¢	AI Models: feed masked notes into clinical NLP models safely.
________________________________________
7. Future Prospects
‚Ä¢	Integrate transformer-based de-identification models (e.g., BioBERT, ClinicalBERT).
‚Ä¢	Use FHIR standard for structured outputs.
‚Ä¢	Build API version of the app (FastAPI + Docker) for enterprise use.
‚Ä¢	Extend to multi-language support (Indian regional languages).
‚Ä¢	Add evaluation metrics like Precision/Recall against gold annotations.
‚Ä¢	Enhance with synthetic PHI generation for testing robustness.
________________________________________
8. Tech Stack
‚Ä¢	Python (Regex, spaCy, Pandas)
‚Ä¢	Streamlit (Web app)
‚Ä¢	Jupyter Notebook (Prototyping)
‚Ä¢	GitHub + LinkedIn (deployment & showcase)
________________________________________
